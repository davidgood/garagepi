// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/davidgood/garagepi/web/login"
)

type FakeHandler struct {
	LoginGETStub        func(w http.ResponseWriter, r *http.Request)
	loginGETMutex       sync.RWMutex
	loginGETArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	LoginPOSTStub        func(w http.ResponseWriter, r *http.Request)
	loginPOSTMutex       sync.RWMutex
	loginPOSTArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	LogoutPOSTStub        func(w http.ResponseWriter, r *http.Request)
	logoutPOSTMutex       sync.RWMutex
	logoutPOSTArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
}

func (fake *FakeHandler) LoginGET(w http.ResponseWriter, r *http.Request) {
	fake.loginGETMutex.Lock()
	fake.loginGETArgsForCall = append(fake.loginGETArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.loginGETMutex.Unlock()
	if fake.LoginGETStub != nil {
		fake.LoginGETStub(w, r)
	}
}

func (fake *FakeHandler) LoginGETCallCount() int {
	fake.loginGETMutex.RLock()
	defer fake.loginGETMutex.RUnlock()
	return len(fake.loginGETArgsForCall)
}

func (fake *FakeHandler) LoginGETArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.loginGETMutex.RLock()
	defer fake.loginGETMutex.RUnlock()
	return fake.loginGETArgsForCall[i].w, fake.loginGETArgsForCall[i].r
}

func (fake *FakeHandler) LoginPOST(w http.ResponseWriter, r *http.Request) {
	fake.loginPOSTMutex.Lock()
	fake.loginPOSTArgsForCall = append(fake.loginPOSTArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.loginPOSTMutex.Unlock()
	if fake.LoginPOSTStub != nil {
		fake.LoginPOSTStub(w, r)
	}
}

func (fake *FakeHandler) LoginPOSTCallCount() int {
	fake.loginPOSTMutex.RLock()
	defer fake.loginPOSTMutex.RUnlock()
	return len(fake.loginPOSTArgsForCall)
}

func (fake *FakeHandler) LoginPOSTArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.loginPOSTMutex.RLock()
	defer fake.loginPOSTMutex.RUnlock()
	return fake.loginPOSTArgsForCall[i].w, fake.loginPOSTArgsForCall[i].r
}

func (fake *FakeHandler) LogoutPOST(w http.ResponseWriter, r *http.Request) {
	fake.logoutPOSTMutex.Lock()
	fake.logoutPOSTArgsForCall = append(fake.logoutPOSTArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.logoutPOSTMutex.Unlock()
	if fake.LogoutPOSTStub != nil {
		fake.LogoutPOSTStub(w, r)
	}
}

func (fake *FakeHandler) LogoutPOSTCallCount() int {
	fake.logoutPOSTMutex.RLock()
	defer fake.logoutPOSTMutex.RUnlock()
	return len(fake.logoutPOSTArgsForCall)
}

func (fake *FakeHandler) LogoutPOSTArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.logoutPOSTMutex.RLock()
	defer fake.logoutPOSTMutex.RUnlock()
	return fake.logoutPOSTArgsForCall[i].w, fake.logoutPOSTArgsForCall[i].r
}

var _ login.Handler = new(FakeHandler)
