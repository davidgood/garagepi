// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/davidgood/garagepi/gpio"
)

type FakeGpio struct {
	ReadStub        func(pin uint) (string, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		pin uint
	}
	readReturns struct {
		result1 string
		result2 error
	}
	WriteLowStub        func(pin uint) error
	writeLowMutex       sync.RWMutex
	writeLowArgsForCall []struct {
		pin uint
	}
	writeLowReturns struct {
		result1 error
	}
	WriteHighStub        func(pin uint) error
	writeHighMutex       sync.RWMutex
	writeHighArgsForCall []struct {
		pin uint
	}
	writeHighReturns struct {
		result1 error
	}
}

func (fake *FakeGpio) Read(pin uint) (string, error) {
	fake.readMutex.Lock()
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		pin uint
	}{pin})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(pin)
	} else {
		return fake.readReturns.result1, fake.readReturns.result2
	}
}

func (fake *FakeGpio) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeGpio) ReadArgsForCall(i int) uint {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].pin
}

func (fake *FakeGpio) ReadReturns(result1 string, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpio) WriteLow(pin uint) error {
	fake.writeLowMutex.Lock()
	fake.writeLowArgsForCall = append(fake.writeLowArgsForCall, struct {
		pin uint
	}{pin})
	fake.writeLowMutex.Unlock()
	if fake.WriteLowStub != nil {
		return fake.WriteLowStub(pin)
	} else {
		return fake.writeLowReturns.result1
	}
}

func (fake *FakeGpio) WriteLowCallCount() int {
	fake.writeLowMutex.RLock()
	defer fake.writeLowMutex.RUnlock()
	return len(fake.writeLowArgsForCall)
}

func (fake *FakeGpio) WriteLowArgsForCall(i int) uint {
	fake.writeLowMutex.RLock()
	defer fake.writeLowMutex.RUnlock()
	return fake.writeLowArgsForCall[i].pin
}

func (fake *FakeGpio) WriteLowReturns(result1 error) {
	fake.WriteLowStub = nil
	fake.writeLowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpio) WriteHigh(pin uint) error {
	fake.writeHighMutex.Lock()
	fake.writeHighArgsForCall = append(fake.writeHighArgsForCall, struct {
		pin uint
	}{pin})
	fake.writeHighMutex.Unlock()
	if fake.WriteHighStub != nil {
		return fake.WriteHighStub(pin)
	} else {
		return fake.writeHighReturns.result1
	}
}

func (fake *FakeGpio) WriteHighCallCount() int {
	fake.writeHighMutex.RLock()
	defer fake.writeHighMutex.RUnlock()
	return len(fake.writeHighArgsForCall)
}

func (fake *FakeGpio) WriteHighArgsForCall(i int) uint {
	fake.writeHighMutex.RLock()
	defer fake.writeHighMutex.RUnlock()
	return fake.writeHighArgsForCall[i].pin
}

func (fake *FakeGpio) WriteHighReturns(result1 error) {
	fake.WriteHighStub = nil
	fake.writeHighReturns = struct {
		result1 error
	}{result1}
}

var _ gpio.Gpio = new(FakeGpio)
